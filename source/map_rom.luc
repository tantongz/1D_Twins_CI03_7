// 000 001 . . . . . . . . . . . . . 101 000
// .       001 001 . . . . . 100 001	    .
// .       .      COORDINATES       .       .
// .       001 100 . . . . . 100 100	    .
// 000 101 . . . . . . . . . . . . . 101 101

module map_rom (
    input level_adr[4],
    
    output map_a[6][6],
    output map_b[6][6],
    output sp_a[6],
    output sp_b[6],
    output ep_a[6],
    output ep_b[6]
  ){
  
  always {
    case (level_adr) {
      1:  map_a = {b111111,
          b100001,
          b110101,
          b100001,
          b100101,
          b111111};  // map a, 1 if wall or obstacle
        
        map_b = {b111111,
          b101001,
          b100001,
          b101001,
          b100001,
          b111111};  // map b, 1 if wall or obstacle
        
        sp_a = b100001; // start position for map a
        sp_b = b100001; // start position for map b
        ep_a = b001100; // end position for map a
        ep_b = b001100; // end position for map b
      
      2:  map_a = {b111111,
          b100101,
          b110001,
          b101011,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100101,
          b110001,
          b100101,
          b100001,
          b111111};
        
        sp_a = b100001;
        sp_b = b100001;
        ep_a = b100100;
        ep_b = b100100;
      
      3:  map_a = {b111111,
          b100001,
          b101001,
          b110011,
          b101001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b100101,
          b110011,
          b100101,
          b111111};
        
        sp_a = b100100;
        sp_b = b100100;
        ep_a = b001001;
        ep_b = b001100;
        
      4:  map_a = {b111111,
          b100001,
          b100001,
          b100011,
          b100001,
          b111111};
        
        map_b = {b111111,
          b101001,
          b100001,
          b100001,
          b100001,
          b111111};
        
        sp_a = b010010;
        sp_b = b011011;
        ep_a = b011011;
        ep_b = b010010;
        
      5:  map_a = {b111111,
          b100001,
          b100101,
          b100001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b110011,
          b100001,
          b100001,
          b100011,
          b111111};
        
        sp_a = b010001;
        sp_b = b001010;
        ep_a = b011001;
        ep_b = b011011;
      
      6:  map_a = {b111111,
          b100001,
          b100001,
          b100001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b101001,
          b100001,
          b100001,
          b111111};
        
        sp_a = b011010;
        sp_b = b001100;
        ep_a = b010001;
        ep_b = b100001;
      
      7:  map_a = {b111111,
          b100001,
          b100001,
          b100001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b100001,
          b100001,
          b101001,
          b111111};
        
        sp_a = b100001;
        sp_b = b100011;
        ep_a = b011100;
        ep_b = b001100;
        
      8:  map_a = {b111111,
          b100001,
          b100001,
          b100001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b100001,
          b110001,
          b100001,
          b111111};
        
        sp_a = b011011;
        sp_b = b010010;
        ep_a = b001100;
        ep_b = b001001;
      
      9:  map_a = {b111111,
          b110001,
          b100001,
          b100001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b101001,
          b100001,
          b101001,
          b111111};
        
        sp_a = b100011;
        sp_b = b100011;
        ep_a = b011010;
        ep_b = b001010;
      
      10:  map_a = {b111111,
          b100001,
          b110001,
          b100001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b101001,
          b100001,
          b100001,
          b111111};
        
        sp_a = b011010;
        sp_b = b011010;
        ep_a = b001011;
        ep_b = b100010;
      
      11:  map_a = {b111111,
          b101001,
          b100001,
          b110001,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b101001,
          b100001,
          b100001,
          b111111};
        
        sp_a = b011010;
        sp_b = b011100;
        ep_a = b001001;
        ep_b = b100001;
        
      12:  map_a = {b111111,
          b100001,
          b100001,
          b100101,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b101001,
          b100001,
          b100001,
          b111111};
        
        sp_a = b001011;
        sp_b = b001100;
        ep_a = b011011;
        ep_b = b001010;
        
      13:  map_a = {b111111,
          b100001,
          b100101,
          b100001,
          b100011,
          b111111};
        
        map_b = {b111111,
          b100001,
          b110001,
          b100011,
          b100001,
          b111111};
        
        sp_a = b100001;
        sp_b = b100001;
        ep_a = b011100;
        ep_b = b011001;
      
      14:  map_a = {b111111,
          b100001,
          b101001,
          b100011,
          b100101,
          b111111};
        
        map_b = {b111111,
          b100101,
          b100001,
          b100001,
          b100001,
          b111111};
        
        sp_a = b100001;
        sp_b = b100001;
        ep_a = b010100;
        ep_b = b010010;
        
      15:  map_a = {b111111,
          b100001,
          b101001,
          b100101,
          b100001,
          b111111};
        
        map_b = {b111111,
          b100001,
          b100101,
          b101001,
          b100001,
          b111111};
        
        sp_a = b011010;
        sp_b = b010010;
        ep_a = b010011;
        ep_b = b011011;
      
      //default -- simple 
      default:
        map_a = {b111111,
          b100001,
          b100001,
          b100001,
          b100001,
          b111111};  // map a, 1 if wall or obstacle
        
        map_b = {b111111,
          b100001,
          b100001,
          b100001,
          b100001,
          b111111};  // map b, 1 if wall or obstacle
        
        sp_a = b100001; // start position for map a
        sp_b = b011100; // start position for map b
        ep_a = b011011; // end position for map a
        ep_b = b010011; // end position for map b
    }
  }
}
