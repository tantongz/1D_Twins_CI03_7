/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tracks_rom_23 (
    input [2:0] track,
    input update,
    input clk,
    input rst,
    output reg pulse,
    output reg [2:0] cur_index
  );
  
  
  
  wire [1-1:0] M_slowclk_value;
  counter_38 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  wire [1-1:0] M_pC4_pulse;
  reg [8-1:0] M_pC4_value;
  reg [1-1:0] M_pC4_update;
  pwm_39 pC4 (
    .clk(clk),
    .rst(rst),
    .value(M_pC4_value),
    .update(M_pC4_update),
    .pulse(M_pC4_pulse)
  );
  wire [1-1:0] M_pG4_pulse;
  reg [8-1:0] M_pG4_value;
  reg [1-1:0] M_pG4_update;
  pwm_40 pG4 (
    .clk(clk),
    .rst(rst),
    .value(M_pG4_value),
    .update(M_pG4_update),
    .pulse(M_pG4_pulse)
  );
  wire [1-1:0] M_pC5_pulse;
  reg [8-1:0] M_pC5_value;
  reg [1-1:0] M_pC5_update;
  pwm_41 pC5 (
    .clk(clk),
    .rst(rst),
    .value(M_pC5_value),
    .update(M_pC5_update),
    .pulse(M_pC5_pulse)
  );
  wire [1-1:0] M_pC6_pulse;
  reg [8-1:0] M_pC6_value;
  reg [1-1:0] M_pC6_update;
  pwm_42 pC6 (
    .clk(clk),
    .rst(rst),
    .value(M_pC6_value),
    .update(M_pC6_update),
    .pulse(M_pC6_pulse)
  );
  wire [1-1:0] M_pA5_pulse;
  reg [8-1:0] M_pA5_value;
  reg [1-1:0] M_pA5_update;
  pwm_43 pA5 (
    .clk(clk),
    .rst(rst),
    .value(M_pA5_value),
    .update(M_pA5_update),
    .pulse(M_pA5_pulse)
  );
  wire [1-1:0] M_pGS5_pulse;
  reg [8-1:0] M_pGS5_value;
  reg [1-1:0] M_pGS5_update;
  pwm_44 pGS5 (
    .clk(clk),
    .rst(rst),
    .value(M_pGS5_value),
    .update(M_pGS5_update),
    .pulse(M_pGS5_pulse)
  );
  reg [2:0] M_actual_track_d, M_actual_track_q = 1'h0;
  reg M_playing_d, M_playing_q = 1'h0;
  
  reg [2:0] M_index_d, M_index_q = 1'h0;
  
  reg [27:0] track1;
  
  reg [27:0] track2;
  
  reg [27:0] track3;
  
  reg [27:0] track4;
  
  always @* begin
    M_index_d = M_index_q;
    M_playing_d = M_playing_q;
    M_actual_track_d = M_actual_track_q;
    
    cur_index = M_index_q;
    if (update == 1'h1) begin
      M_actual_track_d = track;
      M_index_d = 1'h0;
      M_playing_d = 1'h1;
    end
    M_pC4_update = 1'h1;
    M_pG4_update = 1'h1;
    M_pC5_update = 1'h1;
    M_pC6_update = 1'h1;
    M_pA5_update = 1'h1;
    M_pGS5_update = 1'h1;
    M_pC4_value = 8'h08;
    M_pG4_value = 8'h08;
    M_pC5_value = 8'h08;
    M_pC6_value = 8'h08;
    M_pA5_value = 8'h08;
    M_pGS5_value = 8'h08;
    track1 = 28'h2323332;
    track2 = 28'h2300000;
    track3 = 28'h3200000;
    track4 = 28'h3000000;
    pulse = 1'h0;
    if (M_playing_q == 1'h1) begin
      M_index_d = M_index_q - 1'h1;
      if (M_index_q == 3'h7) begin
        M_playing_d = 1'h0;
      end
      
      case (M_actual_track_q)
        3'h1: begin
          
          case (track1[(M_index_q)*4+3-:4])
            1'h1: begin
              pulse = M_pC4_pulse;
            end
            2'h2: begin
              pulse = M_pG4_pulse;
            end
            2'h3: begin
              pulse = M_pC5_pulse;
            end
            3'h4: begin
              pulse = M_pC6_pulse;
            end
            3'h5: begin
              pulse = M_pA5_pulse;
            end
            3'h6: begin
              pulse = M_pGS5_pulse;
            end
          endcase
        end
        3'h2: begin
          
          case (track2[(M_index_q)*4+3-:4])
            1'h1: begin
              pulse = M_pC4_pulse;
            end
            2'h2: begin
              pulse = M_pG4_pulse;
            end
            2'h3: begin
              pulse = M_pC5_pulse;
            end
            3'h4: begin
              pulse = M_pC6_pulse;
            end
            3'h5: begin
              pulse = M_pA5_pulse;
            end
            3'h6: begin
              pulse = M_pGS5_pulse;
            end
          endcase
        end
        3'h3: begin
          
          case (track3[(M_index_q)*4+3-:4])
            1'h1: begin
              pulse = M_pC4_pulse;
            end
            2'h2: begin
              pulse = M_pG4_pulse;
            end
            2'h3: begin
              pulse = M_pC5_pulse;
            end
            3'h4: begin
              pulse = M_pC6_pulse;
            end
            3'h5: begin
              pulse = M_pA5_pulse;
            end
            3'h6: begin
              pulse = M_pGS5_pulse;
            end
          endcase
        end
        3'h4: begin
          
          case (track4[(M_index_q)*4+3-:4])
            1'h1: begin
              pulse = M_pC4_pulse;
            end
            2'h2: begin
              pulse = M_pG4_pulse;
            end
            2'h3: begin
              pulse = M_pC5_pulse;
            end
            3'h4: begin
              pulse = M_pC6_pulse;
            end
            3'h5: begin
              pulse = M_pA5_pulse;
            end
            3'h6: begin
              pulse = M_pGS5_pulse;
            end
          endcase
        end
        default: begin
          pulse = 1'h0;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_actual_track_q <= 1'h0;
      M_playing_q <= 1'h0;
    end else begin
      M_actual_track_q <= M_actual_track_d;
      M_playing_q <= M_playing_d;
    end
  end
  
  
  always @(posedge M_slowclk_value) begin
    if (rst == 1'b1) begin
      M_index_q <= 1'h0;
    end else begin
      M_index_q <= M_index_d;
    end
  end
  
endmodule
