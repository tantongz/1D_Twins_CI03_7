/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input right_btn,
    input left_btn,
    input up_btn,
    input down_btn,
    input reset_btn,
    input start_btn,
    output reg [7:0] r_red,
    output reg [7:0] r_green,
    output reg [7:0] col,
    output reg [7:0] led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_mat_dis_row_red;
  wire [8-1:0] M_mat_dis_row_green;
  wire [8-1:0] M_mat_dis_col;
  reg [64-1:0] M_mat_dis_green;
  reg [64-1:0] M_mat_dis_red;
  matrix_display_1 mat_dis (
    .clk(clk),
    .rst(rst),
    .green(M_mat_dis_green),
    .red(M_mat_dis_red),
    .row_red(M_mat_dis_row_red),
    .row_green(M_mat_dis_row_green),
    .col(M_mat_dis_col)
  );
  
  wire [36-1:0] M_map_map_a;
  wire [36-1:0] M_map_map_b;
  wire [6-1:0] M_map_sp_a;
  wire [6-1:0] M_map_sp_b;
  wire [6-1:0] M_map_ep_a;
  wire [6-1:0] M_map_ep_b;
  reg [4-1:0] M_map_level_adr;
  map_rom_2 map (
    .level_adr(M_map_level_adr),
    .map_a(M_map_map_a),
    .map_b(M_map_map_b),
    .sp_a(M_map_sp_a),
    .sp_b(M_map_sp_b),
    .ep_a(M_map_ep_a),
    .ep_b(M_map_ep_b)
  );
  
  wire [64-1:0] M_map_to_dis_red;
  wire [64-1:0] M_map_to_dis_green;
  reg [6-1:0] M_map_to_dis_tp_a;
  reg [6-1:0] M_map_to_dis_ep_a;
  reg [36-1:0] M_map_to_dis_map_a;
  reg [6-1:0] M_map_to_dis_tp_b;
  reg [6-1:0] M_map_to_dis_ep_b;
  reg [36-1:0] M_map_to_dis_map_b;
  reg [1-1:0] M_map_to_dis_fill_border_green;
  reg [1-1:0] M_map_to_dis_fill_border_red;
  reg [1-1:0] M_map_to_dis_slowclk;
  reg [1-1:0] M_map_to_dis_show_splashscreen;
  map_to_display_3 map_to_dis (
    .tp_a(M_map_to_dis_tp_a),
    .ep_a(M_map_to_dis_ep_a),
    .map_a(M_map_to_dis_map_a),
    .tp_b(M_map_to_dis_tp_b),
    .ep_b(M_map_to_dis_ep_b),
    .map_b(M_map_to_dis_map_b),
    .fill_border_green(M_map_to_dis_fill_border_green),
    .fill_border_red(M_map_to_dis_fill_border_red),
    .slowclk(M_map_to_dis_slowclk),
    .show_splashscreen(M_map_to_dis_show_splashscreen),
    .red(M_map_to_dis_red),
    .green(M_map_to_dis_green)
  );
  
  wire [6-1:0] M_decoder_new_pos;
  reg [6-1:0] M_decoder_curr_pos;
  reg [36-1:0] M_decoder_mapdata;
  reg [3-1:0] M_decoder_sel_new_pos;
  matrix_decoder_4 decoder (
    .curr_pos(M_decoder_curr_pos),
    .mapdata(M_decoder_mapdata),
    .sel_new_pos(M_decoder_sel_new_pos),
    .new_pos(M_decoder_new_pos)
  );
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z_;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_main_5 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z_(M_alu_z_),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [2-1:0] M_ctrl_sel_new_pos;
  wire [6-1:0] M_ctrl_alufn;
  wire [1-1:0] M_ctrl_sel_level;
  wire [1-1:0] M_ctrl_sel_check;
  wire [1-1:0] M_ctrl_sel_map;
  wire [1-1:0] M_ctrl_fill_border_red;
  wire [1-1:0] M_ctrl_fill_border_green;
  wire [1-1:0] M_ctrl_show_splashscreen;
  wire [1-1:0] M_ctrl_hide_screen;
  wire [20-1:0] M_ctrl_text;
  reg [2-1:0] M_ctrl_direction;
  reg [4-1:0] M_ctrl_state;
  reg [4-1:0] M_ctrl_cur_level;
  control_6 ctrl (
    .direction(M_ctrl_direction),
    .state(M_ctrl_state),
    .cur_level(M_ctrl_cur_level),
    .sel_new_pos(M_ctrl_sel_new_pos),
    .alufn(M_ctrl_alufn),
    .sel_level(M_ctrl_sel_level),
    .sel_check(M_ctrl_sel_check),
    .sel_map(M_ctrl_sel_map),
    .fill_border_red(M_ctrl_fill_border_red),
    .fill_border_green(M_ctrl_fill_border_green),
    .show_splashscreen(M_ctrl_show_splashscreen),
    .hide_screen(M_ctrl_hide_screen),
    .text(M_ctrl_text)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_7 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_right_edge_detector_out;
  reg [1-1:0] M_right_edge_detector_in;
  edge_detector_8 right_edge_detector (
    .clk(clk),
    .in(M_right_edge_detector_in),
    .out(M_right_edge_detector_out)
  );
  wire [1-1:0] M_left_edge_detector_out;
  reg [1-1:0] M_left_edge_detector_in;
  edge_detector_8 left_edge_detector (
    .clk(clk),
    .in(M_left_edge_detector_in),
    .out(M_left_edge_detector_out)
  );
  wire [1-1:0] M_up_edge_detector_out;
  reg [1-1:0] M_up_edge_detector_in;
  edge_detector_8 up_edge_detector (
    .clk(clk),
    .in(M_up_edge_detector_in),
    .out(M_up_edge_detector_out)
  );
  wire [1-1:0] M_down_edge_detector_out;
  reg [1-1:0] M_down_edge_detector_in;
  edge_detector_8 down_edge_detector (
    .clk(clk),
    .in(M_down_edge_detector_in),
    .out(M_down_edge_detector_out)
  );
  wire [1-1:0] M_right_conditioner_out;
  reg [1-1:0] M_right_conditioner_in;
  button_conditioner_12 right_conditioner (
    .clk(clk),
    .in(M_right_conditioner_in),
    .out(M_right_conditioner_out)
  );
  wire [1-1:0] M_left_conditioner_out;
  reg [1-1:0] M_left_conditioner_in;
  button_conditioner_12 left_conditioner (
    .clk(clk),
    .in(M_left_conditioner_in),
    .out(M_left_conditioner_out)
  );
  wire [1-1:0] M_up_conditioner_out;
  reg [1-1:0] M_up_conditioner_in;
  button_conditioner_12 up_conditioner (
    .clk(clk),
    .in(M_up_conditioner_in),
    .out(M_up_conditioner_out)
  );
  wire [1-1:0] M_down_conditioner_out;
  reg [1-1:0] M_down_conditioner_in;
  button_conditioner_12 down_conditioner (
    .clk(clk),
    .in(M_down_conditioner_in),
    .out(M_down_conditioner_out)
  );
  wire [1-1:0] M_reset_edge_detector_out;
  reg [1-1:0] M_reset_edge_detector_in;
  edge_detector_8 reset_edge_detector (
    .clk(clk),
    .in(M_reset_edge_detector_in),
    .out(M_reset_edge_detector_out)
  );
  wire [1-1:0] M_start_edge_detector_out;
  reg [1-1:0] M_start_edge_detector_in;
  edge_detector_8 start_edge_detector (
    .clk(clk),
    .in(M_start_edge_detector_in),
    .out(M_start_edge_detector_out)
  );
  wire [1-1:0] M_reset_conditioner_out;
  reg [1-1:0] M_reset_conditioner_in;
  button_conditioner_12 reset_conditioner (
    .clk(clk),
    .in(M_reset_conditioner_in),
    .out(M_reset_conditioner_out)
  );
  wire [1-1:0] M_start_conditioner_out;
  reg [1-1:0] M_start_conditioner_in;
  button_conditioner_12 start_conditioner (
    .clk(clk),
    .in(M_start_conditioner_in),
    .out(M_start_conditioner_out)
  );
  localparam SPLASHSCREEN_state = 4'd0;
  localparam MENU_WAIT_state = 4'd1;
  localparam MENU_UPDATE_state = 4'd2;
  localparam SETUP_state = 4'd3;
  localparam RESET_state = 4'd4;
  localparam WAIT_state = 4'd5;
  localparam CHECKA_state = 4'd6;
  localparam CHECKB_state = 4'd7;
  localparam CHECKWIN_state = 4'd8;
  localparam CHECKRESTART_state = 4'd9;
  localparam WIN_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = SPLASHSCREEN_state;
  reg [3:0] M_level_d, M_level_q = 1'h1;
  reg [2:0] M_reg_d_d, M_reg_d_q = 3'h4;
  reg [3:0] M_leveltenth_d, M_leveltenth_q = 1'h0;
  reg [2:0] M_see_d, M_see_q = 1'h0;
  reg M_reg_s_d, M_reg_s_q = 1'h0;
  reg M_reg_r_d, M_reg_r_q = 1'h0;
  reg [5:0] M_player_pos_a_d, M_player_pos_a_q = 1'h0;
  reg [5:0] M_player_pos_b_d, M_player_pos_b_q = 1'h0;
  reg [15:0] M_r1_d, M_r1_q = 1'h0;
  reg [15:0] M_r2_d, M_r2_q = 1'h0;
  wire [8-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [20-1:0] M_seg_display_values;
  reg [4-1:0] M_seg_display_decimal;
  multi_seven_seg_20 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .decimal(M_seg_display_decimal),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  wire [1-1:0] M_slowclk_value;
  counter_21 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  wire [1-1:0] M_midclock_value;
  counter_22 midclock (
    .clk(clk),
    .rst(rst),
    .value(M_midclock_value)
  );
  
  reg [7:0] M_win_timer_d, M_win_timer_q = 1'h0;
  
  reg [7:0] M_wait_timer_d, M_wait_timer_q = 1'h0;
  
  reg r0;
  
  reg [3:0] new_level;
  
  always @* begin
    M_state_d = M_state_q;
    M_r2_d = M_r2_q;
    M_player_pos_a_d = M_player_pos_a_q;
    M_player_pos_b_d = M_player_pos_b_q;
    M_see_d = M_see_q;
    M_reg_r_d = M_reg_r_q;
    M_level_d = M_level_q;
    M_win_timer_d = M_win_timer_q;
    M_wait_timer_d = M_wait_timer_q;
    M_reg_d_d = M_reg_d_q;
    M_reg_s_d = M_reg_s_q;
    M_r1_d = M_r1_q;
    
    M_seg_display_decimal = 4'hf;
    M_map_level_adr = M_level_q;
    io_seg = ~M_seg_display_seg;
    io_sel = ~M_seg_display_sel;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    r_red = M_mat_dis_row_red;
    r_green = M_mat_dis_row_green;
    col = M_mat_dis_col;
    M_mat_dis_red = M_map_to_dis_red;
    M_mat_dis_green = M_map_to_dis_green;
    M_map_to_dis_map_a = M_map_map_a;
    M_map_to_dis_map_b = M_map_map_b;
    M_map_to_dis_tp_a = M_player_pos_a_q;
    M_map_to_dis_tp_b = M_player_pos_b_q;
    M_map_to_dis_fill_border_green = M_ctrl_fill_border_green;
    M_map_to_dis_fill_border_red = M_ctrl_fill_border_red;
    M_map_to_dis_ep_a = M_map_ep_a;
    M_map_to_dis_ep_b = M_map_ep_b;
    M_map_to_dis_show_splashscreen = M_ctrl_show_splashscreen;
    M_map_to_dis_slowclk = M_slowclk_value;
    M_decoder_curr_pos = 6'h00;
    M_decoder_sel_new_pos = M_ctrl_sel_new_pos;
    M_decoder_mapdata = M_map_map_a;
    M_alu_a = 8'h00;
    M_alu_b = 8'h00;
    M_alu_alufn = M_ctrl_alufn;
    led = 8'h00;
    led = M_r1_q;
    M_ctrl_state = 1'h0;
    M_ctrl_direction = 1'h0;
    M_ctrl_cur_level = M_level_q;
    M_reg_s_d = 1'h0;
    if (M_ctrl_sel_check == 1'h0) begin
      M_alu_a = M_decoder_new_pos;
      if (M_ctrl_sel_map == 1'h0) begin
        M_alu_b = M_map_ep_a;
        M_r1_d = M_alu_alu;
      end else begin
        M_alu_b = M_map_ep_b;
        M_r2_d = M_alu_alu;
      end
    end else begin
      M_alu_a = M_r1_q;
      M_alu_b = M_r2_q;
    end
    r0 = M_alu_alu[0+0-:1];
    led = 8'h00;
    led = M_r1_q;
    M_ctrl_state = 1'h0;
    M_ctrl_direction = 1'h0;
    M_reg_s_d = 1'h0;
    M_seg_display_values = M_ctrl_text;
    M_wait_timer_d = 1'h0;
    
    case (M_state_q)
      SPLASHSCREEN_state: begin
        M_ctrl_state = 1'h0;
        M_wait_timer_d = M_wait_timer_q + 1'h1;
        if (M_wait_timer_q == 2'h3) begin
          M_wait_timer_d = 1'h0;
          M_state_d = MENU_WAIT_state;
        end
      end
      MENU_WAIT_state: begin
        M_ctrl_state = 1'h1;
        M_player_pos_a_d = M_map_sp_a;
        M_player_pos_b_d = M_map_sp_b;
        M_wait_timer_d = 1'h0;
        M_win_timer_d = 1'h0;
        if (M_right_edge_detector_out) begin
          M_reg_d_d = 2'h3;
        end else begin
          if (M_left_edge_detector_out) begin
            M_reg_d_d = 2'h2;
          end else begin
            if (M_up_edge_detector_out) begin
              M_reg_d_d = 1'h1;
            end else begin
              if (M_down_edge_detector_out) begin
                M_reg_d_d = 1'h0;
              end else begin
                M_reg_d_d = 3'h4;
              end
            end
          end
        end
        if (M_reg_d_q != 3'h4) begin
          M_state_d = MENU_UPDATE_state;
          M_ctrl_state = 1'h1;
          M_ctrl_direction = M_reg_d_q;
          M_see_d = M_reg_d_q;
        end
        M_reg_s_d = M_start_edge_detector_out ? 1'h1 : 1'h0;
        if (M_reg_s_q == 1'h1) begin
          M_state_d = SETUP_state;
        end
      end
      MENU_UPDATE_state: begin
        M_ctrl_state = 1'h1;
        M_ctrl_direction = M_see_q;
        new_level = M_ctrl_sel_level ? M_level_q + 1'h1 : M_level_q - 1'h1;
        if (new_level == 4'h0) begin
          if (M_level_q == 4'h1) begin
            M_level_d = 4'hf;
          end else begin
            if (M_level_q == 4'hf) begin
              M_level_d = 4'h1;
            end
          end
        end else begin
          M_level_d = new_level;
        end
        M_reg_d_d = 3'h4;
        M_see_d = 3'h4;
        M_state_d = MENU_WAIT_state;
      end
      SETUP_state: begin
        M_ctrl_state = 4'h8;
        M_player_pos_a_d = M_map_sp_a;
        M_player_pos_b_d = M_map_sp_b;
        M_wait_timer_d = M_wait_timer_q + 1'h1;
        if (M_wait_timer_q == 3'h5) begin
          M_wait_timer_d = 1'h0;
          M_state_d = WAIT_state;
        end
      end
      RESET_state: begin
        M_ctrl_state = 4'h9;
        M_player_pos_a_d = M_map_sp_a;
        M_player_pos_b_d = M_map_sp_b;
        M_wait_timer_d = M_wait_timer_q + 1'h1;
        if (M_wait_timer_q == 3'h5) begin
          M_wait_timer_d = 1'h0;
          M_state_d = WAIT_state;
        end
      end
      WAIT_state: begin
        M_ctrl_state = 2'h2;
        led = 8'h81;
        M_wait_timer_d = 1'h0;
        if (M_right_edge_detector_out) begin
          M_reg_d_d = 2'h3;
        end else begin
          if (M_left_edge_detector_out) begin
            M_reg_d_d = 2'h2;
          end else begin
            if (M_up_edge_detector_out) begin
              M_reg_d_d = 1'h1;
            end else begin
              if (M_down_edge_detector_out) begin
                M_reg_d_d = 1'h0;
              end else begin
                M_reg_d_d = 3'h4;
              end
            end
          end
        end
        if (M_reg_d_q != 3'h4) begin
          M_state_d = CHECKA_state;
          M_ctrl_state = 2'h3;
          M_ctrl_direction = M_reg_d_q;
          M_see_d = M_reg_d_q;
        end
        M_reg_r_d = M_reset_edge_detector_out ? 1'h1 : 1'h0;
        if (M_reg_r_q == 1'h1) begin
          M_state_d = SETUP_state;
        end
      end
      CHECKA_state: begin
        M_ctrl_state = 2'h3;
        M_ctrl_direction = M_see_q;
        M_decoder_mapdata = M_map_map_a;
        M_decoder_curr_pos = M_player_pos_a_q;
        M_player_pos_a_d = M_decoder_new_pos;
        M_state_d = CHECKB_state;
        M_see_d = M_see_q;
      end
      CHECKB_state: begin
        M_ctrl_state = 3'h4;
        M_ctrl_direction = M_see_q;
        M_decoder_curr_pos = M_player_pos_b_q;
        M_decoder_mapdata = M_map_map_b;
        M_player_pos_b_d = M_decoder_new_pos;
        M_state_d = CHECKWIN_state;
      end
      CHECKWIN_state: begin
        M_ctrl_state = 3'h5;
        M_state_d = r0 ? WIN_state : CHECKRESTART_state;
      end
      CHECKRESTART_state: begin
        M_ctrl_state = 3'h6;
        M_state_d = r0 ? RESET_state : WAIT_state;
      end
      WIN_state: begin
        M_ctrl_state = 3'h7;
        led = 8'hff;
        M_win_timer_d = M_win_timer_q + 1'h1;
        if (M_win_timer_q == 2'h3) begin
          M_win_timer_d = 1'h0;
          M_state_d = MENU_WAIT_state;
        end
        M_reg_r_d = M_reset_edge_detector_out ? 1'h1 : 1'h0;
        if (M_reg_r_q == 1'h1) begin
          M_state_d = MENU_WAIT_state;
        end
      end
    endcase
    M_right_conditioner_in = right_btn;
    M_left_conditioner_in = left_btn;
    M_up_conditioner_in = up_btn;
    M_down_conditioner_in = down_btn;
    M_right_edge_detector_in = M_right_conditioner_out;
    M_left_edge_detector_in = M_left_conditioner_out;
    M_up_edge_detector_in = M_up_conditioner_out;
    M_down_edge_detector_in = M_down_conditioner_out;
    M_reset_conditioner_in = reset_btn;
    M_start_conditioner_in = start_btn;
    M_reset_edge_detector_in = M_reset_conditioner_out;
    M_start_edge_detector_in = M_start_conditioner_out;
  end
  
  always @(posedge M_slowclk_value) begin
    if (rst == 1'b1) begin
      M_win_timer_q <= 1'h0;
    end else begin
      M_win_timer_q <= M_win_timer_d;
    end
  end
  
  
  always @(posedge M_midclock_value) begin
    if (rst == 1'b1) begin
      M_wait_timer_q <= 1'h0;
    end else begin
      M_wait_timer_q <= M_wait_timer_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_level_q <= M_level_d;
    M_reg_d_q <= M_reg_d_d;
    M_leveltenth_q <= M_leveltenth_d;
    M_see_q <= M_see_d;
    M_reg_s_q <= M_reg_s_d;
    M_reg_r_q <= M_reg_r_d;
    M_player_pos_a_q <= M_player_pos_a_d;
    M_player_pos_b_q <= M_player_pos_b_d;
    M_r1_q <= M_r1_d;
    M_r2_q <= M_r2_d;
    M_state_q <= M_state_d;
  end
  
endmodule
