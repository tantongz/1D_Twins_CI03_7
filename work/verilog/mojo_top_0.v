/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input right_btn,
    input left_btn,
    input up_btn,
    input down_btn,
    input reset_btn,
    input start_btn,
    output reg [7:0] r_red,
    output reg [7:0] r_green,
    output reg [7:0] col,
    output reg [7:0] led
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_mat_dis_r_red;
  wire [8-1:0] M_mat_dis_r_green;
  wire [8-1:0] M_mat_dis_col;
  reg [64-1:0] M_mat_dis_green;
  reg [64-1:0] M_mat_dis_red;
  matrix_display_1 mat_dis (
    .clk(clk),
    .rst(rst),
    .green(M_mat_dis_green),
    .red(M_mat_dis_red),
    .r_red(M_mat_dis_r_red),
    .r_green(M_mat_dis_r_green),
    .col(M_mat_dis_col)
  );
  
  wire [36-1:0] M_map_map_a;
  wire [36-1:0] M_map_map_b;
  wire [6-1:0] M_map_sp_a;
  wire [6-1:0] M_map_sp_b;
  wire [6-1:0] M_map_ep_a;
  wire [6-1:0] M_map_ep_b;
  reg [2-1:0] M_map_level_adr;
  map_rom_2 map (
    .level_adr(M_map_level_adr),
    .map_a(M_map_map_a),
    .map_b(M_map_map_b),
    .sp_a(M_map_sp_a),
    .sp_b(M_map_sp_b),
    .ep_a(M_map_ep_a),
    .ep_b(M_map_ep_b)
  );
  
  wire [64-1:0] M_map_to_dis_red;
  wire [64-1:0] M_map_to_dis_green;
  reg [6-1:0] M_map_to_dis_tp_a;
  reg [6-1:0] M_map_to_dis_ep_a;
  reg [36-1:0] M_map_to_dis_map_a;
  reg [6-1:0] M_map_to_dis_tp_b;
  reg [6-1:0] M_map_to_dis_ep_b;
  reg [36-1:0] M_map_to_dis_map_b;
  map_to_display_3 map_to_dis (
    .tp_a(M_map_to_dis_tp_a),
    .ep_a(M_map_to_dis_ep_a),
    .map_a(M_map_to_dis_map_a),
    .tp_b(M_map_to_dis_tp_b),
    .ep_b(M_map_to_dis_ep_b),
    .map_b(M_map_to_dis_map_b),
    .red(M_map_to_dis_red),
    .green(M_map_to_dis_green)
  );
  
  wire [1-1:0] M_ctrl_sel_level;
  wire [1-1:0] M_ctrl_sel_display;
  reg [2-1:0] M_ctrl_direction;
  reg [3-1:0] M_ctrl_state;
  control_n_4 ctrl (
    .direction(M_ctrl_direction),
    .state(M_ctrl_state),
    .sel_level(M_ctrl_sel_level),
    .sel_display(M_ctrl_sel_display)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_right_edge_detector_out;
  reg [1-1:0] M_right_edge_detector_in;
  edge_detector_6 right_edge_detector (
    .clk(clk),
    .in(M_right_edge_detector_in),
    .out(M_right_edge_detector_out)
  );
  wire [1-1:0] M_left_edge_detector_out;
  reg [1-1:0] M_left_edge_detector_in;
  edge_detector_6 left_edge_detector (
    .clk(clk),
    .in(M_left_edge_detector_in),
    .out(M_left_edge_detector_out)
  );
  wire [1-1:0] M_up_edge_detector_out;
  reg [1-1:0] M_up_edge_detector_in;
  edge_detector_6 up_edge_detector (
    .clk(clk),
    .in(M_up_edge_detector_in),
    .out(M_up_edge_detector_out)
  );
  wire [1-1:0] M_down_edge_detector_out;
  reg [1-1:0] M_down_edge_detector_in;
  edge_detector_6 down_edge_detector (
    .clk(clk),
    .in(M_down_edge_detector_in),
    .out(M_down_edge_detector_out)
  );
  wire [1-1:0] M_right_conditioner_out;
  reg [1-1:0] M_right_conditioner_in;
  button_conditioner_10 right_conditioner (
    .clk(clk),
    .in(M_right_conditioner_in),
    .out(M_right_conditioner_out)
  );
  wire [1-1:0] M_left_conditioner_out;
  reg [1-1:0] M_left_conditioner_in;
  button_conditioner_10 left_conditioner (
    .clk(clk),
    .in(M_left_conditioner_in),
    .out(M_left_conditioner_out)
  );
  wire [1-1:0] M_up_conditioner_out;
  reg [1-1:0] M_up_conditioner_in;
  button_conditioner_10 up_conditioner (
    .clk(clk),
    .in(M_up_conditioner_in),
    .out(M_up_conditioner_out)
  );
  wire [1-1:0] M_down_conditioner_out;
  reg [1-1:0] M_down_conditioner_in;
  button_conditioner_10 down_conditioner (
    .clk(clk),
    .in(M_down_conditioner_in),
    .out(M_down_conditioner_out)
  );
  wire [1-1:0] M_reset_edge_detector_out;
  reg [1-1:0] M_reset_edge_detector_in;
  edge_detector_6 reset_edge_detector (
    .clk(clk),
    .in(M_reset_edge_detector_in),
    .out(M_reset_edge_detector_out)
  );
  wire [1-1:0] M_start_edge_detector_out;
  reg [1-1:0] M_start_edge_detector_in;
  edge_detector_6 start_edge_detector (
    .clk(clk),
    .in(M_start_edge_detector_in),
    .out(M_start_edge_detector_out)
  );
  wire [1-1:0] M_reset_conditioner_out;
  reg [1-1:0] M_reset_conditioner_in;
  button_conditioner_10 reset_conditioner (
    .clk(clk),
    .in(M_reset_conditioner_in),
    .out(M_reset_conditioner_out)
  );
  wire [1-1:0] M_start_conditioner_out;
  reg [1-1:0] M_start_conditioner_in;
  button_conditioner_10 start_conditioner (
    .clk(clk),
    .in(M_start_conditioner_in),
    .out(M_start_conditioner_out)
  );
  localparam MENU_WAIT_state = 1'd0;
  localparam MENU_UPDATE_state = 1'd1;
  
  reg M_state_d, M_state_q = MENU_WAIT_state;
  reg [1:0] M_level_d, M_level_q = 2'h3;
  reg [2:0] M_reg_d_d, M_reg_d_q = 3'h4;
  reg [2:0] M_see_d, M_see_q = 1'h0;
  
  reg [1:0] lx;
  
  always @* begin
    M_state_d = M_state_q;
    M_see_d = M_see_q;
    M_level_d = M_level_q;
    M_reg_d_d = M_reg_d_q;
    
    M_map_level_adr = M_level_q;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    r_red = M_mat_dis_r_red;
    r_green = M_mat_dis_r_green;
    col = M_mat_dis_col;
    M_mat_dis_red = M_map_to_dis_red;
    M_mat_dis_green = M_map_to_dis_green;
    M_map_to_dis_map_a = M_map_map_a;
    M_map_to_dis_map_b = M_map_map_b;
    M_map_to_dis_tp_a = M_map_sp_a;
    M_map_to_dis_tp_b = M_map_sp_b;
    M_map_to_dis_ep_a = M_map_ep_a;
    M_map_to_dis_ep_b = M_map_ep_b;
    led = 8'h00;
    led = M_see_q;
    M_ctrl_state = 1'h0;
    M_ctrl_direction = 1'h0;
    
    case (M_state_q)
      MENU_WAIT_state: begin
        if (M_right_edge_detector_out) begin
          M_reg_d_d = 2'h3;
        end else begin
          if (M_left_edge_detector_out) begin
            M_reg_d_d = 2'h2;
          end else begin
            if (M_up_edge_detector_out) begin
              M_reg_d_d = 1'h1;
            end else begin
              if (M_down_edge_detector_out) begin
                M_reg_d_d = 1'h0;
              end else begin
                M_reg_d_d = 3'h4;
              end
            end
          end
        end
        if (M_reg_d_q != 3'h4) begin
          M_state_d = MENU_UPDATE_state;
          M_ctrl_state = 1'h1;
          M_ctrl_direction = M_reg_d_q;
          M_see_d = M_reg_d_q;
        end
      end
      MENU_UPDATE_state: begin
        M_ctrl_state = 1'h1;
        M_ctrl_direction = M_see_q;
        if (M_ctrl_sel_level) begin
          M_level_d = M_level_q + 1'h1;
        end else begin
          M_level_d = M_level_q - 1'h1;
        end
        M_reg_d_d = 3'h4;
        M_see_d = 3'h4;
        M_state_d = MENU_WAIT_state;
      end
    endcase
    M_right_conditioner_in = right_btn;
    M_left_conditioner_in = left_btn;
    M_up_conditioner_in = up_btn;
    M_down_conditioner_in = down_btn;
    M_right_edge_detector_in = M_right_conditioner_out;
    M_left_edge_detector_in = M_left_conditioner_out;
    M_up_edge_detector_in = M_up_conditioner_out;
    M_down_edge_detector_in = M_down_conditioner_out;
    M_reset_conditioner_in = reset_btn;
    M_start_conditioner_in = start_btn;
    M_reset_edge_detector_in = M_reset_conditioner_out;
    M_start_edge_detector_in = M_start_conditioner_out;
  end
  
  always @(posedge clk) begin
    M_level_q <= M_level_d;
    M_reg_d_q <= M_reg_d_d;
    M_see_q <= M_see_d;
    M_state_q <= M_state_d;
  end
  
endmodule
