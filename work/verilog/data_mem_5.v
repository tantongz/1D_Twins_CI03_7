/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module data_mem_5 (
    input clk,
    input sel_map,
    input [1:0] level_adr_i,
    input sel_start,
    input [15:0] r0_i,
    input [5:0] new_tp_i,
    output reg [1:0] level_adr,
    output reg [63:0] red,
    output reg [63:0] green,
    output reg [15:0] r0,
    output reg [35:0] curr_map,
    output reg [5:0] curr_ep,
    output reg [5:0] curr_tp
  );
  
  
  
  reg [5:0] M_reg_tp_a_d, M_reg_tp_a_q = 1'h0;
  reg [5:0] M_reg_tp_b_d, M_reg_tp_b_q = 1'h0;
  
  wire [36-1:0] M_map_mem_map_a;
  wire [36-1:0] M_map_mem_map_b;
  wire [6-1:0] M_map_mem_sp_a;
  wire [6-1:0] M_map_mem_sp_b;
  wire [6-1:0] M_map_mem_ep_a;
  wire [6-1:0] M_map_mem_ep_b;
  reg [2-1:0] M_map_mem_level_adr;
  map_rom_19 map_mem (
    .level_adr(M_map_mem_level_adr),
    .map_a(M_map_mem_map_a),
    .map_b(M_map_mem_map_b),
    .sp_a(M_map_mem_sp_a),
    .sp_b(M_map_mem_sp_b),
    .ep_a(M_map_mem_ep_a),
    .ep_b(M_map_mem_ep_b)
  );
  
  wire [64-1:0] M_display_map_call_red;
  wire [64-1:0] M_display_map_call_green;
  reg [6-1:0] M_display_map_call_tp_a;
  reg [6-1:0] M_display_map_call_ep_a;
  reg [36-1:0] M_display_map_call_map_a;
  reg [6-1:0] M_display_map_call_tp_b;
  reg [6-1:0] M_display_map_call_ep_b;
  reg [36-1:0] M_display_map_call_map_b;
  map_to_display_20 display_map_call (
    .tp_a(M_display_map_call_tp_a),
    .ep_a(M_display_map_call_ep_a),
    .map_a(M_display_map_call_map_a),
    .tp_b(M_display_map_call_tp_b),
    .ep_b(M_display_map_call_ep_b),
    .map_b(M_display_map_call_map_b),
    .red(M_display_map_call_red),
    .green(M_display_map_call_green)
  );
  
  always @* begin
    M_reg_tp_b_d = M_reg_tp_b_q;
    M_reg_tp_a_d = M_reg_tp_a_q;
    
    M_map_mem_level_adr = level_adr_i;
    if (sel_start == 1'h1) begin
      M_reg_tp_a_d = M_map_mem_sp_a;
      M_reg_tp_b_d = M_map_mem_sp_b;
      r0 = 1'h0;
    end else begin
      M_reg_tp_a_d = M_reg_tp_a_q;
      M_reg_tp_b_d = M_reg_tp_b_q;
      r0 = r0_i;
    end
    if (sel_map == 1'h0) begin
      curr_map = M_map_mem_map_a;
      curr_ep = M_map_mem_ep_a;
      curr_tp = M_reg_tp_a_q;
      M_reg_tp_a_d = new_tp_i;
      curr_tp = M_reg_tp_a_q;
    end else begin
      curr_map = M_map_mem_map_b;
      curr_ep = M_map_mem_ep_b;
      curr_tp = M_reg_tp_b_q;
      M_reg_tp_b_d = new_tp_i;
      curr_tp = M_reg_tp_b_q;
    end
    level_adr = level_adr_i;
    M_display_map_call_map_a = M_map_mem_map_a;
    M_display_map_call_map_b = M_map_mem_map_b;
    M_display_map_call_tp_a = M_reg_tp_a_q;
    M_display_map_call_tp_b = M_reg_tp_b_q;
    M_display_map_call_ep_a = M_map_mem_ep_a;
    M_display_map_call_ep_b = M_map_mem_ep_b;
    red = M_display_map_call_red;
    green = M_display_map_call_green;
  end
  
  always @(posedge clk) begin
    M_reg_tp_a_q <= M_reg_tp_a_d;
    M_reg_tp_b_q <= M_reg_tp_b_d;
  end
  
endmodule
